// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password  String
  name String @map("firstName") // 用於改變欄位名稱
  role Role? @default(USER) // 可為 null

  profile Profile? // one-to-one
  posts Post[] // one-to-many

  @@map("Users") // 用於改變表名稱，但代碼中仍使用 User 這個 model 名稱

  // 以下用於建立複合主鍵、複合唯一鍵、複合索引
  // @@id([email, name]) // 複合主鍵，取代 id 欄位，當作該表的唯一識別碼
  @@unique([name, role]) // 複合唯一鍵，用於確保 name 和 role 的組合是唯一的，不能有相同的組合
  @@index([id, email]) // 複合索引，用於加速查詢，可以加速查詢，但會增加寫入的負擔
}

model Post {
  id Int @id @default(autoincrement())
  title String
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean @default(false)
  likeNum Int @default(0)
  // 設定 onDelete: SetNull 表示當 User 被刪除時，文章的作者欄位會被設為 null，id, 關聯 User 需為可為 null 的欄位
  // 設定 onDelete: Cascade 表示當 User 被刪除時，文章也會被刪除
  // 設定 onDelete: Restrict 表示當 User 被刪除時，如果有關聯記錄存在，則阻止刪除
  // 設定 onDelete: NoAction 表示當 User 被刪除時，不採取任何動作（可能導致外鍵約束錯誤）
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
  categories Category[]
  tags PostTag[]
}

// Implicit relation for many-to-many
model Category {
  id Int @id @default(autoincrement())
  name String
  posts Post[]
}

// Explicit relation for many-to-many
model PostTag {
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())  // 可以記錄標籤被添加的時間
  
  @@id([postId, tagId]) // 將 postId 和 tagId 設為複合主鍵
}
model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts PostTag[] // 改為使用中間表
}

enum Role {
  ADMIN
  USER
}

model Profile {
  id Int @id @default(autoincrement())
  bio String

  // 以下用於建立 one-to-one 關係
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
  // or
  // user User?
}


// 復合主鍵，取代 id 欄位，當作該表的唯一識別碼
model UserSec {
  firstName String
  lastName String
  profile ProfileSec?

  @@id([firstName, lastName])
}

model ProfileSec {
  id Int @id 
  userFirstName String
  userLastName String
  user UserSec @relation(fields: [userFirstName, userLastName], references: [firstName, lastName])

  @@unique([userFirstName, userLastName])
}